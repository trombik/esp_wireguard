#if !defined(__ESP_WIREGUARD__H__)
#define __ESP_WIREGUARD__H__

#include <stdint.h>
#include <esp_err.h>

typedef struct {
    /* interface config */
    char*       private_key;            /**< a base64 private key generated by wg genkey. Required. */
    int         listen_port;            /**< a 16-bit port for listening */
    uint32_t    fw_mark;                /**< a 32-bit fwmark for outgoing packets */
    /* peer config */
    char*       public_key;             /**< a base64 public key calculated by wg pubkey from a private key. Required. */
    char*       preshared_key;          /**< a base64 preshared key generated by wg genpsk. */
    char*       allowed_ip;             /**< a local IP address. */
    char*       allowed_ip_mask;        /**< a subnet mask of the local IP address. */
    char*       endpoint;               /**< an endpoint IP address or hostname. */
    int         port;                   /**< a port number of remote endpoint. */
    int         persistent_keepalive;   /**< a seconds interval, between 1 and 65535 inclusive, of how often to send an
                                             authenticated empty packet to the peer for the purpose of keeping a stateful
                                             firewall or NAT mapping valid persistently. */
} wireguard_config_t;

typedef struct {
    wireguard_config_t* config;        /**< a pointer to wireguard config */
    struct netif*       netif;         /**< a pointer to configured netif */
} wireguard_ctx_t;

/**
 * @brief Initialize WireGuard interface.
 *
 * @param       config WireGuard configuration.
 * @param[out]  ctx Context of WireGuard.
 *
 * @return
 *      - ESP_OK: Successfully initilized WireGuard interface.
 *      - ESP_ERR_INVALID_ARG: given argument is invalid.
 *      - ESP_FAIL: Other error.
 */
esp_err_t esp_wireguard_init(wireguard_config_t *config, wireguard_ctx_t *ctx);

/**
 * @brief Start the connection to the peer.
 *
 * @param       ctx Context of WireGuard.
 * @return
 *      - ESP_OK on success.
 *      - ESP_FAIL on failure.
 */
esp_err_t esp_wireguard_connect(wireguard_ctx_t *ctx);

/**
 * @brief Set the default gateway to the peer.
 * @param ctx Context of WireGuard
 */
void esp_wireguard_set_default(wireguard_ctx_t *ctx);

/**
 * @brief Test if the peer is up.
 */
esp_err_t esp_wireguardif_peer_is_up(wireguard_ctx_t *ctx);

#endif
// vim: expandtab
